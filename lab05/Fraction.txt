


import sys #Imports the system-specific parameters and functions 


def computeGCD(alpha, beta):
    '''
    (int, int) -> int
    This function finds the greatest common divisor of two integers, using
    Euclid's algorithm
    '''
    alpha = abs(alpha)
    beta = abs(beta)
    remainder = alpha % beta
    while (remainder != 0):
        alpha = beta
        beta = remainder
        remainder = alpha % beta
    return beta



class Fraction():
    
    def __init__(self, numerator= 0, denominator= 1):
        '''This initializes a fraction object with default values 0 and 1 for the numerator and denominator respectively,
        receives values for the numerator and denominator and checks if these values satisfy the invariant.
        and checks '''
        if denominator != 0: #ensures denominator is not zero
            self._numerator = numerator
            self._denominator = denominator
            self.simplify() # This simplifies the values provided by the calling program.
        else:
            print('Unable to create valid fraction', file=sys.stderr)
            sys.exit(-1)
    
    
    
    
    def __str__(self):
        
        return str(self._numerator) + '/' +  str(self._denominator)
    
    
    
    def get_numerator(self):
        
        return self._numerator
    
    
    def get_denominator(self):
        
        return self._denominator
    
    
    def simplify(self):
        
        gcd =computeGCD(self._numerator, self._denominator)
        
        if gcd != 0:
            self._numerator = (self._numerator//gcd)
            self._denominator = (self._denominator//gcd)
            
        if self._denominator < 0:
            self._numerator *= -1
            self._denominator *= -1
            
            
    def __mul__(self, other):
        if other.get_denominator !=0:
            new_numerator = self._numerator * other.get_numerator()
            new_denominator = self._denominator * other.get_denominator()
            new_fraction = str(new_numerator) + '/' +  str(new_denominator)
            self.simplify()
            return new_fraction
        else:
            print('Unable to create valid fraction', file=sys.stderr)
            sys.exit(-1)
            
        
        
            
            









































f1 = Fraction() #Construct a fraction object with the default values.
print('f1:',f1) #Print the object.


f2 = Fraction(1, 2)     #Construct a fraction object for one half.
print('f2:',f2)               #Print the object.


        #Exercise 8.4
# f_3 = Fraction(0,0)
# print('f_3:',f_3)

# fraction4 = Fraction(13,0)
# print('fraction4:',fraction4)


fraction5 = Fraction(12,3)
print('fraction5:',fraction5)


        #Testing the accessor method
print('fraction5 denominator:', fraction5.get_denominator())
print('fraction5 numerator:',fraction5.get_numerator())


f3 = Fraction(2, 4)     
print('f3 simplified:',f3)     


        #Exercise 8.6
fraction6 = Fraction(16,4)
print('fraction6 simplified:',fraction6)

fraction7 = Fraction(-3,-1)
print('fraction7 simplified:',fraction7)

f_8 = Fraction(-2,-8)
print('fraction8 simplified:',fraction8)


        #Exercise 8.7
fraction9 = f1 * f2
print('f1 * f2:', fraction9)

fraction10 = fraction5 * fraction6
print('fraction5 * fraction6:',fraction10)

fraction11 = fraction7 * f2
print('fraction7 * f2:',fraction11)
